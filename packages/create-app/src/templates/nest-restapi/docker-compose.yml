version: "3.9"

services:
  postgres:
    image: postgres:13.2-alpine
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      - database
    healthcheck:
      test: pg_isready -q
      start_period: 5s
      interval: 5s
    restart: unless-stopped

  api:
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.${COMPOSE_PROJECT_NAME}_app--strip-api.stripprefix.prefixes=/api
      - traefik.http.middlewares.${COMPOSE_PROJECT_NAME}_app--strip-api.stripprefix.forceSlash=false
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_app.rule=Host(`${DOMAIN}`) && PathPrefix(`/api`)
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_app.middlewares=${COMPOSE_PROJECT_NAME}_app--strip-api
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_app.entrypoints=http
    depends_on:
      postgres:
        condition: service_healthy
    build:
      x-bake:
        tags: ${COMPOSE_PROJECT_NAME}_app:latest
        cache-from: type=local,src=/tmp/cache/${COMPOSE_PROJECT_NAME}_app
        cache-to: type=local,mode=max,dest=/tmp/cache/${COMPOSE_PROJECT_NAME}_app
        output: type=docker,dest=${COMPOSE_PROJECT_NAME}_app.tar
    image: ${COMPOSE_PROJECT_NAME}_app:latest
    volumes:
      - ./public:/app/public
    networks:
      - database
      - traefik
    restart: unless-stopped

volumes:
  postgres:

networks:
  database:
  traefik:
    name: traefik
