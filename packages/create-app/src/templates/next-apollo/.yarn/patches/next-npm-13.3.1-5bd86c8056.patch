diff --git a/dist/server/node-web-streams-helper.d.ts b/dist/server/node-web-streams-helper.d.ts
index 79f8dc6c3d13cfb35fc23a34aa89c0ce5b317343..c225cd531fc5c1052641d5ba20c2b904122842e2 100644
--- a/dist/server/node-web-streams-helper.d.ts
+++ b/dist/server/node-web-streams-helper.d.ts
@@ -2,6 +2,7 @@
 import type { FlightRouterState } from './app-render';
 export declare type ReactReadableStream = ReadableStream<Uint8Array> & {
     allReady?: Promise<void> | undefined;
+    pageProps?: Record<string, unknown>;
 };
 export declare function encodeText(input: string): Uint8Array;
 export declare function decodeText(input: Uint8Array | undefined, textDecoder: TextDecoder): string;
diff --git a/dist/server/render.js b/dist/server/render.js
index 2ef23aae491b4b58032b85f172f104f74082a35b..0ef27ec6438380199a0f6c52701e7fc6a4107857 100644
--- a/dist/server/render.js
+++ b/dist/server/render.js
@@ -657,8 +657,11 @@ async function renderToHTML(req, res, pathname, query, renderOpts) {
                 }
                 const { App: EnhancedApp , Component: EnhancedComponent  } = enhanceComponents(options, App, Component);
                 if (renderShell) {
-                    return renderShell(EnhancedApp, EnhancedComponent).then(async (stream)=>{
+                    return renderShell(EnhancedApp, EnhancedComponent, options.enhancedRenderToInitialStream).then(async (stream)=>{                        
                         await stream.allReady;
+                        if (stream.pageProps) {
+                            Object.assign(props1.pageProps, stream.pageProps);
+                        }                        
                         const html = await (0, _nodeWebStreamsHelper).streamToString(stream);
                         return {
                             html,
@@ -702,9 +705,9 @@ async function renderToHTML(req, res, pathname, query, renderOpts) {
             })));
         };
         // Always using react concurrent rendering mode with required react version 18.x
-        const renderShell1 = async (EnhancedApp, EnhancedComponent)=>{
-            const content = renderContent(EnhancedApp, EnhancedComponent);
-            return await (0, _nodeWebStreamsHelper).renderToInitialStream({
+        const renderShell1 = async (EnhancedApp, EnhancedComponent, enhancedRenderToInitialStream)=>{
+            const content = renderContent(EnhancedApp, EnhancedComponent);         
+            return await (enhancedRenderToInitialStream ? enhancedRenderToInitialStream((0, _nodeWebStreamsHelper).renderToInitialStream) : (0, _nodeWebStreamsHelper).renderToInitialStream)({
                 ReactDOMServer: _serverBrowser.default,
                 element: content
             });
diff --git a/dist/shared/lib/utils.d.ts b/dist/shared/lib/utils.d.ts
index 9aa9170ae3f6a4a0d965d75c5f645c8c1d861a66..b92e4f8c30d3e724364b5c58fc3d2fc3d83ddb0a 100644
--- a/dist/shared/lib/utils.d.ts
+++ b/dist/shared/lib/utils.d.ts
@@ -3,6 +3,7 @@
 import type { HtmlProps } from './html-context';
 import type { ComponentType } from 'react';
 import type { DomainLocale } from '../../server/config';
+import type { renderToInitialStream } from '../../server/node-web-streams-helper';
 import type { Env } from '@next/env';
 import type { IncomingMessage, ServerResponse } from 'http';
 import type { NextRouter } from './router/router';
@@ -45,6 +46,7 @@ export declare type Enhancer<C> = (Component: C) => C;
 export declare type ComponentsEnhancer = {
     enhanceApp?: Enhancer<AppType>;
     enhanceComponent?: Enhancer<NextComponentType>;
+    enhancedRenderToInitialStream?: (render: typeof renderToInitialStream) => (parameters: Parameters<typeof renderToInitialStream>[0]) => ReturnType<typeof renderToInitialStream>;
 } | Enhancer<NextComponentType>;
 export declare type RenderPageResult = {
     html: string;
