diff --git a/dist/server/next-server.js b/dist/server/next-server.js
index dfe17dc51e4e99a1e4f19162a9f83e1587693f2c..ccbdf158352d956ac9d522164d712a787559bbac 100644
--- a/dist/server/next-server.js
+++ b/dist/server/next-server.js
@@ -348,21 +348,11 @@ class NextNodeServer extends _baseServer.default {
                         }
                         pathParts.splice(0, basePathParts.length);
                     }
-                    let path = `/${pathParts.join("/")}`;
-                    if (!publicFiles.has(path)) {
-                        // In `next-dev-server.ts`, we ensure encoded paths match
-                        // decoded paths on the filesystem. So we need do the
-                        // opposite here: make sure decoded paths match encoded.
-                        path = encodeURI(path);
-                    }
-                    if (publicFiles.has(path)) {
-                        await this.serveStatic(req, res, (0, _path).join(this.publicDir, ...pathParts), parsedUrl);
-                        return {
-                            finished: true
-                        };
-                    }
+
+                    await this.serveStatic(req, res, (0, _path).join(this.publicDir, ...pathParts), parsedUrl);
+
                     return {
-                        finished: false
+                        finished: true
                     };
                 }
             }, 
diff --git a/dist/server/render.js b/dist/server/render.js
index ebd8a9bf5f5f5ba571ad1d38daf5266be7c836c7..74856cd22a99328df6ad250eb54b2b6fe3d6656f 100644
--- a/dist/server/render.js
+++ b/dist/server/render.js
@@ -667,7 +667,13 @@ async function renderToHTML(req, res, pathname, query, renderOpts) {
                 }
                 const { App: EnhancedApp , Component: EnhancedComponent  } = enhanceComponents(options, App, Component);
                 if (renderShell) {
-                    return renderShell(EnhancedApp, EnhancedComponent).then(async (stream)=>{
+                    return renderShell(EnhancedApp, EnhancedComponent, options.enhanceRender).then(async (stream)=>{
+                        if (stream._result) {
+                            return {
+                                html: stream._result,
+                                head
+                            }
+                        }
                         const forwardStream = (0, _nodeWebStreamsHelper).readableStreamTee(stream)[1];
                         const html = await (0, _nodeWebStreamsHelper).streamToString(forwardStream);
                         return {
@@ -712,8 +718,14 @@ async function renderToHTML(req, res, pathname, query, renderOpts) {
             })));
         };
         // Always using react concurrent rendering mode with required react version 18.x
-        const renderShell1 = async (EnhancedApp, EnhancedComponent)=>{
+        const renderShell1 = async (EnhancedApp, EnhancedComponent, enhancedRender)=>{
             const content = renderContent(EnhancedApp, EnhancedComponent);
+            if (enhancedRender) {
+                const { stream, html, pageProps } = await enhancedRender(content, _serverBrowser.default);
+                stream._result = html;
+                Object.assign(props1.pageProps, pageProps);
+                return stream;
+            }
             return await (0, _nodeWebStreamsHelper).renderToInitialStream({
                 ReactDOMServer: _serverBrowser.default,
                 element: content,
diff --git a/dist/shared/lib/utils.d.ts b/dist/shared/lib/utils.d.ts
index 917081c808b9a7cb21129e1ebc8a9acc9668543a..a9a0cef8854bc5bf2f53aa473c0077dcccb9521a 100644
--- a/dist/shared/lib/utils.d.ts
+++ b/dist/shared/lib/utils.d.ts
@@ -1,7 +1,7 @@
 /// <reference types="node" />
 /// <reference types="node" />
 import type { HtmlProps } from './html-context';
-import type { ComponentType } from 'react';
+import type { ComponentType, ReactNode } from 'react';
 import type { DomainLocale } from '../../server/config';
 import type { Env } from '@next/env';
 import type { IncomingMessage, ServerResponse } from 'http';
@@ -9,6 +9,7 @@ import type { NextRouter } from './router/router';
 import type { ParsedUrlQuery } from 'querystring';
 import type { PreviewData } from 'next/types';
 import { COMPILER_NAMES } from './constants';
+import type * as ReactDOMServer from 'react-dom/server';
 export declare type NextComponentType<C extends BaseContext = NextPageContext, IP = {}, P = {}> = ComponentType<P> & {
     /**
      * Used for initial page load data population. Data returned from `getInitialProps` is serialized when server rendered.
@@ -45,6 +46,13 @@ export declare type Enhancer<C> = (Component: C) => C;
 export declare type ComponentsEnhancer = {
     enhanceApp?: Enhancer<AppType>;
     enhanceComponent?: Enhancer<NextComponentType>;
+    enhanceRender?: (Tree: ReactNode, reactDOMServer: typeof ReactDOMServer) => Promise<{
+        stream: ReactDOMServer.ReactDOMServerReadableStream;
+        html: string;
+        pageProps: {
+            [key: string]: any;
+        };
+    }>;
 } | Enhancer<NextComponentType>;
 export declare type RenderPageResult = {
     html: string;
