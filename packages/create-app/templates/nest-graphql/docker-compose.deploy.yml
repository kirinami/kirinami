networks:
  traefik:
    name: traefik
    external: true

services:
  postgres:
    ports: !reset

  app:
    depends_on: !reset
    build:
      cache_from:
        - registry.kirinami.com/${COMPOSE_PROJECT_NAME}-app:cache
      cache_to:
        - registry.kirinami.com/${COMPOSE_PROJECT_NAME}-app:cache
    image: registry.kirinami.com/${COMPOSE_PROJECT_NAME}-app:${BUILD_ID:-latest}
    networks:
      - traefik
    ports: !reset
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.lbswarm=true
        - traefik.http.services.${COMPOSE_PROJECT_NAME}-app.loadbalancer.server.port=3000
        - traefik.http.routers.${COMPOSE_PROJECT_NAME}-app.entrypoints=https
        - traefik.http.routers.${COMPOSE_PROJECT_NAME}-app.tls.certresolver=letsencrypt
        - traefik.http.routers.${COMPOSE_PROJECT_NAME}-app.rule=Host(`${DOMAIN:-${COMPOSE_PROJECT_NAME}.localhost}`)
        - traefik.http.routers.${COMPOSE_PROJECT_NAME}-app.service=${COMPOSE_PROJECT_NAME}-app
      replicas: 1
      update_config:
        parallelism: 1
        failure_action: rollback
        order: start-first
      rollback_config:
        parallelism: 1
        failure_action: pause
        order: start-first
      restart_policy:
        condition: on-failure
        max_attempts: 3
